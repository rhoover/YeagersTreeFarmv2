'use strict';

angular
    .module('ytfApp', ['ngAnimate', 'ngTouch'])

    .config(function ($compileProvider) {
        $compileProvider.debugInfoEnabled(false);

    });
'use strict';

angular
    .module('ytfApp')
    .controller('HeaderCtrl', function ($scope) {
        $scope.mobilemenu = true;
});
'use strict';

angular
    .module('ytfApp')
    .service('loadGoogleFontAPI', function ($window, $q) {

        var deferred = $q.defer();

        //Lazy Load Google fonts. The FOUC is worth the performance benefits IMHO.
        function loadScript() {
            var fontLinks = ['http://fonts.googleapis.com/css?family=Julius+Sans+One', 'http://fonts.googleapis.com/css?family=Open+Sans:300,700'];
            for (var i = 0; i < fontLinks.length; i++) {
                var linkTag = document.createElement('link');
                linkTag.type = 'text/css';
                linkTag.rel = 'stylesheet';
                linkTag.href = fontLinks[i];

                angular.element(document.body).append(linkTag);
            };
        };

        $window = function () {
            deferred.resolve();
        };

        loadScript();

        return deferred.promise;
    });

'use strict';

/**
 *Courtesy of this gem: http://stackoverflow.com/questions/24246403/angularjs-load-google-map-script-async-in-directive-for-multiple-maps
 */

angular
    .module('ytfApp')
    .service('loadGoogleMapAPI', function ($window, $q) {

        var deferred = $q.defer();

        function loadScript() {
            var scriptTag = document.createElement('script');
            scriptTag.src = '//maps.googleapis.com/maps/api/js?true=false&language=en&callback=initMap';
            angular.element(document.body).append(scriptTag);
        }

        $window.initMap = function () {
            deferred.resolve();
        };

        loadScript();

        return deferred.promise;
    });

'use strict';

/**
 * Repeatable map options and initialize/config
 */

angular
    .module('ytfApp')
    .service('googleMapStuff', function googleMapStuff() {
        return {
            mapOptions: function (zoom, lat, lon) {
                var mapOptionsStuff; //google insists be defined

                return mapOptionsStuff = {
                    zoom: zoom,
                    center: new google.maps.LatLng(lat, lon),
                    mapTypeControl: true,
                    mapTypeControlOptions: {
                        style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
                    },
                    zoomControl: true,
                    streetViewControl: false,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };
            },
            mapCreator: function (div, myMapOptions) {
                return new google.maps.Map(div, myMapOptions);
            },
            mapMarker: function (map, lat, lon) {
                return new google.maps.Marker({
                    position: new google.maps.LatLng(lat, lon),
                    map: map
                });
            },
            infoWindowCreator: function (infoContent) {
                return new google.maps.InfoWindow({
                    content: infoContent
                });
            },
            infoWindowClick: function (map, marker, infowindow) {
                return google.maps.event.addListener(marker, 'click', function () {
                    infowindow.open(map, marker);
                });
            }
        };
    });

'use strict';

angular
    .module('ytfApp')
    .directive('resTrigger', function () {
        return {
            restrict: 'A',
            scope: {},
            link: function (scope, element) {
                //Responsive Image Solution
                //Inspired by: http://tech.particulate.me/javascript/2013/10/10/how-to-conveniently-check-for-responsive-breakpoints-in-javascript/
                scope = {};
                var result = getComputedStyle(element[0], ':after').content;
                result = result.replace(/"/g,''); //Because Firefox keeps quotes from content
                switch (result) {
                    case 'phone' :
                        element.addClass('small');
                    break;
                    case 'tablet' :
                        element.addClass('medium');
                    break;
                    case 'computer' :
                        element.addClass('large');
                    break;
                }

            }
        };
    });

'use strict';

angular
    .module('ytfApp')
    .directive('heroTrigger', function ($window) {
        return {
            restrict: 'A',
            scope: {},
            link: function (scope, element) {

                scope = {};
                var url = $window.location.pathname;
                var file = url.substring(url.lastIndexOf('/')+1);
                var name = file.split('.');

                var result = getComputedStyle(element[0], ':after').content;
                result = result.replace(/"/g,''); //Because Firefox keeps quotes from content

                element.addClass(name[0] + '-' + result);

            }
        };
    });

'use strict';

angular
    .module('ytfApp')
    .directive('mainDivTrigger', function ($window) {
        return {
            restrict: 'A',
            scope: {},
            link: function (scope, element) {

                scope = {};
                var url = $window.location.pathname;
                var file = url.substring(url.lastIndexOf('/')+1);
                var name = file.split('.');

                // var result = getComputedStyle(element[0], ':after').content;
                // result = result.replace(/"/g,''); //Because Firefox keeps quotes from content

                element.addClass(name[0]);

            }
        };
    });

'use strict';

angular
    .module('ytfApp')
    .directive('googleMap', function (loadGoogleMapAPI, googleMapStuff) {

        return {
            restrict: 'A',
            scope: {
                lat: '@lat',
                lon: '@lon'
            },
            link: function (scope, element, attrs) {

                //note this is an abstraction on top of standard GoogleMaps initialization stuff, so we don't repeat ourselves
                var myMapOptions, map, marker;
                var div = element[0];

                scope.initialize = function () {

                    myMapOptions = googleMapStuff.mapOptions(13, attrs.lat, attrs.lon);

                    map = googleMapStuff.mapCreator(div, myMapOptions);

                    marker = googleMapStuff.mapMarker(map, attrs.lat, attrs.lon);

                };

                loadGoogleMapAPI.then(function () {

                    //promise succeeded
                    scope.initialize();
                }, function () {

                    //promise failed
                    /* jshint validthis: true */
                    alert('Google maps is clearly not co-operating');
                    /* jshint validthis: true */
                });

            } //end link
        }; //end return
    });

'use strict';

angular
    .module('ytfApp')
    .directive('fontLoad', function (loadGoogleFontAPI) {

        return {
            restrict: 'A',
            scope: {},
            link: function (scope, element, attrs) {

                loadGoogleFontAPI.then(function () {

                    //promise succeeded
                    scope.initialize();
                }, function () {

                    //promise failed
                    /* jshint validthis: true */
                    console.log('Google fonts is clearly not co-operating');
                    /* jshint validthis: true */
                });

            } //end link
        }; //end return
    });
